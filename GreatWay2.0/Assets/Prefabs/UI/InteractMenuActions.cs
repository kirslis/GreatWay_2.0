//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prefabs/UI/InteractMenuActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InteractMenuActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InteractMenuActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InteractMenuActions"",
    ""maps"": [
        {
            ""name"": ""MainActions"",
            ""id"": ""99a20abe-8376-41ae-8f63-ad596d29055b"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""7352f8b6-69cc-4fd2-a61c-d28a6d50e7ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnyKey"",
                    ""type"": ""Button"",
                    ""id"": ""bcee6647-5fad-4435-95de-5246f29bb1eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""73303730-060f-4488-b191-9694d476cd96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00466599-2760-44a6-854e-b03dab5224c5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3603e6d-2d4e-4e82-8114-7d02292a3965"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41885f30-e627-45f4-bada-6ac724340c23"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainActions
        m_MainActions = asset.FindActionMap("MainActions", throwIfNotFound: true);
        m_MainActions_RightClick = m_MainActions.FindAction("RightClick", throwIfNotFound: true);
        m_MainActions_AnyKey = m_MainActions.FindAction("AnyKey", throwIfNotFound: true);
        m_MainActions_LeftClick = m_MainActions.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainActions
    private readonly InputActionMap m_MainActions;
    private IMainActionsActions m_MainActionsActionsCallbackInterface;
    private readonly InputAction m_MainActions_RightClick;
    private readonly InputAction m_MainActions_AnyKey;
    private readonly InputAction m_MainActions_LeftClick;
    public struct MainActionsActions
    {
        private @InteractMenuActions m_Wrapper;
        public MainActionsActions(@InteractMenuActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_MainActions_RightClick;
        public InputAction @AnyKey => m_Wrapper.m_MainActions_AnyKey;
        public InputAction @LeftClick => m_Wrapper.m_MainActions_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_MainActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMainActionsActions instance)
        {
            if (m_Wrapper.m_MainActionsActionsCallbackInterface != null)
            {
                @RightClick.started -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnRightClick;
                @AnyKey.started -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnAnyKey;
                @AnyKey.performed -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnAnyKey;
                @AnyKey.canceled -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnAnyKey;
                @LeftClick.started -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MainActionsActionsCallbackInterface.OnLeftClick;
            }
            m_Wrapper.m_MainActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @AnyKey.started += instance.OnAnyKey;
                @AnyKey.performed += instance.OnAnyKey;
                @AnyKey.canceled += instance.OnAnyKey;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }
        }
    }
    public MainActionsActions @MainActions => new MainActionsActions(this);
    public interface IMainActionsActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnAnyKey(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
