//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prefabs/Entity/Creatures/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""MoveActions"",
            ""id"": ""b546a766-de19-47a6-858e-510bab2586d5"",
            ""actions"": [
                {
                    ""name"": ""LMBDown"",
                    ""type"": ""Button"",
                    ""id"": ""1c53df1b-61ad-4b11-9f16-4e056a7b97e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMB"",
                    ""type"": ""Button"",
                    ""id"": ""6e6fdf5c-0ff8-4047-ac82-b4b4566a55d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""437e1722-495d-4649-b36d-3ade97701bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LMBUp"",
                    ""type"": ""Button"",
                    ""id"": ""993f1cfd-c9d3-456e-940b-62384d0cac62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e99957cd-56fd-4643-b69a-6c69e39a9cf9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMBDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43675c28-68e8-4d26-b1ab-9b4792de8e97"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81cbfa1a-400b-49da-980b-d8ad8f191aa3"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""501e9018-6955-4229-b8eb-5690e90e12c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4ca4e98-0efd-4ee2-b918-90a2211dc61d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMBUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Key and mouse"",
            ""bindingGroup"": ""Key and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MoveActions
        m_MoveActions = asset.FindActionMap("MoveActions", throwIfNotFound: true);
        m_MoveActions_LMBDown = m_MoveActions.FindAction("LMBDown", throwIfNotFound: true);
        m_MoveActions_RMB = m_MoveActions.FindAction("RMB", throwIfNotFound: true);
        m_MoveActions_Space = m_MoveActions.FindAction("Space", throwIfNotFound: true);
        m_MoveActions_LMBUp = m_MoveActions.FindAction("LMBUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveActions
    private readonly InputActionMap m_MoveActions;
    private IMoveActionsActions m_MoveActionsActionsCallbackInterface;
    private readonly InputAction m_MoveActions_LMBDown;
    private readonly InputAction m_MoveActions_RMB;
    private readonly InputAction m_MoveActions_Space;
    private readonly InputAction m_MoveActions_LMBUp;
    public struct MoveActionsActions
    {
        private @PlayerInputAction m_Wrapper;
        public MoveActionsActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LMBDown => m_Wrapper.m_MoveActions_LMBDown;
        public InputAction @RMB => m_Wrapper.m_MoveActions_RMB;
        public InputAction @Space => m_Wrapper.m_MoveActions_Space;
        public InputAction @LMBUp => m_Wrapper.m_MoveActions_LMBUp;
        public InputActionMap Get() { return m_Wrapper.m_MoveActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActionsActions instance)
        {
            if (m_Wrapper.m_MoveActionsActionsCallbackInterface != null)
            {
                @LMBDown.started -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBDown;
                @LMBDown.performed -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBDown;
                @LMBDown.canceled -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBDown;
                @RMB.started -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnRMB;
                @RMB.performed -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnRMB;
                @RMB.canceled -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnRMB;
                @Space.started -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnSpace;
                @LMBUp.started -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBUp;
                @LMBUp.performed -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBUp;
                @LMBUp.canceled -= m_Wrapper.m_MoveActionsActionsCallbackInterface.OnLMBUp;
            }
            m_Wrapper.m_MoveActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LMBDown.started += instance.OnLMBDown;
                @LMBDown.performed += instance.OnLMBDown;
                @LMBDown.canceled += instance.OnLMBDown;
                @RMB.started += instance.OnRMB;
                @RMB.performed += instance.OnRMB;
                @RMB.canceled += instance.OnRMB;
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
                @LMBUp.started += instance.OnLMBUp;
                @LMBUp.performed += instance.OnLMBUp;
                @LMBUp.canceled += instance.OnLMBUp;
            }
        }
    }
    public MoveActionsActions @MoveActions => new MoveActionsActions(this);
    private int m_KeyandmouseSchemeIndex = -1;
    public InputControlScheme KeyandmouseScheme
    {
        get
        {
            if (m_KeyandmouseSchemeIndex == -1) m_KeyandmouseSchemeIndex = asset.FindControlSchemeIndex("Key and mouse");
            return asset.controlSchemes[m_KeyandmouseSchemeIndex];
        }
    }
    public interface IMoveActionsActions
    {
        void OnLMBDown(InputAction.CallbackContext context);
        void OnRMB(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnLMBUp(InputAction.CallbackContext context);
    }
}
