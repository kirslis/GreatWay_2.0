//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prefabs/Entity/Creatures/AI/AIMoveActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AIMoveActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AIMoveActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AIMoveActions"",
    ""maps"": [
        {
            ""name"": ""actions"",
            ""id"": ""77c6ce2d-d45e-4b05-ade2-b041c9cbb810"",
            ""actions"": [
                {
                    ""name"": ""LMB"",
                    ""type"": ""Button"",
                    ""id"": ""953010eb-673c-40f6-b186-7616e9243fa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMB"",
                    ""type"": ""Button"",
                    ""id"": ""238202bf-c809-4104-9206-97b853fe2e8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a3e081c-9404-4d6d-b163-f62303085349"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fddad282-da1a-4c59-afe0-8149f48462df"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // actions
        m_actions = asset.FindActionMap("actions", throwIfNotFound: true);
        m_actions_LMB = m_actions.FindAction("LMB", throwIfNotFound: true);
        m_actions_RMB = m_actions.FindAction("RMB", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // actions
    private readonly InputActionMap m_actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_actions_LMB;
    private readonly InputAction m_actions_RMB;
    public struct ActionsActions
    {
        private @AIMoveActions m_Wrapper;
        public ActionsActions(@AIMoveActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LMB => m_Wrapper.m_actions_LMB;
        public InputAction @RMB => m_Wrapper.m_actions_RMB;
        public InputActionMap Get() { return m_Wrapper.m_actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @LMB.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLMB;
                @LMB.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLMB;
                @LMB.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLMB;
                @RMB.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRMB;
                @RMB.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRMB;
                @RMB.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRMB;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LMB.started += instance.OnLMB;
                @LMB.performed += instance.OnLMB;
                @LMB.canceled += instance.OnLMB;
                @RMB.started += instance.OnRMB;
                @RMB.performed += instance.OnRMB;
                @RMB.canceled += instance.OnRMB;
            }
        }
    }
    public ActionsActions @actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnLMB(InputAction.CallbackContext context);
        void OnRMB(InputAction.CallbackContext context);
    }
}
